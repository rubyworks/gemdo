= Rock

* home: http://proutils.github.com/rock
* work: http://github.com/protuils/rock


== DESCRIPTION

Rock defines a standard Ruby POM (Project Object Model).
Rock provides a standardized layout and a class model for working
with Ruby projects. Rock largely supports the most common practices of the
Ruby community, but also defines new practices shore up some of the weaker 
points of Ruby project standards, and expand its capabilities.


== WHY?

Consider the state of Ruby project standards today. While a number of well
aheared practices have evolved over the years, largely due to specifications 
of the orginal setup.rb, still other common project needs remain chaotic and
confusing. The storage of the a project's current version is one of the most
painfully obvious examples. The data is required in a project's .gemspec, but
good practice dictates that is also needed in our library code as a constant;
if we use Rakegem that constanct should be in lib/foo.rb, but if we are using
Bundler it is expected in lib/foo/version.rb. If we use Bones to help us manage
our project, the verison is also stored in a VERSION file as a string, but if 
we use Jeweler instead uses the same file but prefers a hash. All this for
only one field and a handful of available tools.


== SYNOPSIS

Primarily Rock defines a standard set of project layout and design patterns.
Most of these derive for setup.rb --the original Ruby project specification,
and common patterns widely used among the Ruby community.

The specification designates particular files and their uses, most fo which
are obvious, such as a `README` or a `MANIFEST`. Others are new introduced
by Rock to shore up the weaks links in common paactices. In particular, Rock
designates a `.ruby` file to act as the "metadata engine yard", linking named
information to the resources within project metadata files.

This entire specification is then implemeted in Ruby code, known as the "Rock"
(Project Object Model). Primary usage of this model relies on the toplevel
Project class, instantiated by passing the constructor the root directory
of the project.

  project = Project.new(root_directory)

The project object then ties into all the available metadata, e.g.

  project.name
  project.version
  project.profile

  etc...

Rock also provides a command line tool with some useful project utilities.
For example, it can be used to bump a project's version number.

  $ rock bump --patch

See the Wiki[http://wiki.github.com/proutils/rock] and
API[http://proutils.github.com/rock/rdoc] documentation for further
details.


== Upgrading from 1.x to 2.0

Earlier versions of Rock used a directory-based configuration store, storing
each peice of informtation in a separate file under the meta/ or .meta/
directory. The latest versions of Rock have replaced this with a small
set of YAML-base configuration files. While both approaches has their
advantages and disadvantages, Rock moved to later primarily because of it's
familiarity to developers.

If you were using an old version of Rock with a project and need to updgrade,
the rock command provides a helpful subcommand:

  $ rock upgrade

This will create a PROFILE, PACKAGE and REQUIRE file containing the entries
in the meta/ or .meta/ directory. It will not be prefect, so be sure to edit
the files, but it will at least make the process much easier.


== DEVELOPMENT

You can subscribe to the ProUtils mailing list by sensing a message to
this mailing address[mailto:protuils+subscribe@googlegroups.com].

Or visit http://groups.google.com/group/proutils.

Integration testing is handled by QED and unit testing is handled by
Lemon.


== HOW TO INSTALL

To install with RubyGems simply open a console and type:

  $ sudo gem install rock

Site installation requires Setup.rb (gem install setup),
then download the tarball package and type:

  $ tar -xvzf rock-2.1.0.tar.gz
  $ cd rock-2.1.0.tar.gz
  $ sudo setup.rb all

Windows users use 'ruby setup.rb all'.


== LICENSE/COPYRIGHT

(MIT License)

Copyright (c) 2009 Thomas Sawyer

This program is ditributed under the terms of the MIT license.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

See LICENSE file for more details.
